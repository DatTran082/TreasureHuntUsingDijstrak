// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreasureHunt.Infrastructure.Context;

#nullable disable

namespace TreasureHunt.Infrastructure.Migrations
{
    [DbContext(typeof(TreasureDbContext))]
    partial class TreasureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.MapCell", b =>
                {
                    b.Property<int>("CellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CellId"));

                    b.Property<int>("ColIndex")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CellId");

                    b.HasIndex("MapId");

                    b.ToTable("MapCells");
                });

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.Solution", b =>
                {
                    b.Property<int>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolutionId"));

                    b.Property<double>("FuelUsed")
                        .HasColumnType("float");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SolvedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SolutionId");

                    b.HasIndex("MapId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.TreasureMap", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MapId"));

                    b.Property<int>("Columns")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rows")
                        .HasColumnType("int");

                    b.HasKey("MapId");

                    b.ToTable("TreasureMaps");
                });

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.MapCell", b =>
                {
                    b.HasOne("TreasureHunt.Infrastructure.Data.Entities.TreasureMap", "TreasureMap")
                        .WithMany("Cells")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreasureMap");
                });

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.Solution", b =>
                {
                    b.HasOne("TreasureHunt.Infrastructure.Data.Entities.TreasureMap", "TreasureMap")
                        .WithMany("Solutions")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreasureMap");
                });

            modelBuilder.Entity("TreasureHunt.Infrastructure.Data.Entities.TreasureMap", b =>
                {
                    b.Navigation("Cells");

                    b.Navigation("Solutions");
                });
#pragma warning restore 612, 618
        }
    }
}
